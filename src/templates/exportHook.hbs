{{>header}}
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';

import { {{clientName}} } from '../../client';
{{#if imports}}
	{{#each imports}}
		import type { {{{this}}} } from '../../client/models/{{{this}}}';
	{{/each}}
{{/if}}

const client = new {{clientName}}();

{{#each operations}}
		{{#equals method 'GET'}}
			export const use{{pascalCase name}} = ({{#if parameters}}{{>parameters}}{{else}}_: any{{/if}}, options?: Partial<UseQueryOptions<{{>result}}>>) => {
				return useQuery<{{>result}}>({
					queryKey: ['{{ camelCase service}}', '{{ camelCase name }}', {{#each parameters}}{{name}}, {{/each}}],
				 	queryFn: async () => {
						 return client.{{camelCase service}}.{{name}}({{#if parameters}}{
							  {{#each parameters}}
									  {{#if name}}
										   {{name}},
									  {{else}}
										_,
									  {{/if}}
							  {{/each}}
				   		 }{{/if}});
					  },
					...options
		  		});
			};
		{{else}}
			export const use{{pascalCase name}} = (options?: Partial<UseMutationOptions<{{>result}}>>) => {
				return useMutation<{{>result}}, any, any>({
					mutationFn: async ({{>parameters}}) => {
						 return client.{{camelCase service}}.{{name}}({{#if parameters}}{
							  {{#each parameters}}
									  {{name}},
							  {{/each}}
						 }{{/if}});
					},
					...options
				});
			};
		{{/equals}}
{{/each}}

