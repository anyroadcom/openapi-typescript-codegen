{{>header}}

import { useQuery, useMutation } from '@anyroad/hooks';
import type { useQueryOptions, useMutationOptions } from '@anyroad/hooks';
import { {{clientName}} } from '../../client';
{{#if imports}}
	{{#each imports}}
		import type { {{{this}}} } from '../../client/models/{{{this}}}';
	{{/each}}
{{/if}}

const client = new {{clientName}}();

{{#each operations}}
		{{#equals method 'GET'}}
			export const use{{pascalCase name}} = ({{>parameters}}, options?: UseQueryOptions<{{>result}}>) => {
				return useQuery<{{>result}}>(['{{ camelCase service}}', '{{ camelCase name }}', {{#each parameters}}{{name}}, {{/each}}], async () => {
					return client.{{camelCase service}}.{{name}}({{#if parameters}}{
						{{#each parameters}}
						{{name}},
						{{/each}}
					}{{/if}});
				}, options);
			};
		{{else}}
			export const use{{pascalCase name}} = (options?: UseMutationOptions<{{>result}}>) => {
				return useMutation<{{>result}}>(async ({{>parameters}}) => {
					return client.{{camelCase service}}.{{name}}({{#if parameters}}{
						{{#each parameters}}
						{{name}},
						{{/each}}
					}{{/if}});
				}, options);
			};
		{{/equals}}
{{/each}}

