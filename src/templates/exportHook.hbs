{{>header}}
import { useInfiniteQuery, useQuery, useMutation } from '@tanstack/react-query';
import type { UseInfiniteQueryOptions, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';

import { {{clientName}} } from '../../client';
{{#if imports}}
	{{#each imports}}
		import type { {{{this}}} } from '../../client/models/{{{this}}}';
	{{/each}}
{{/if}}

const client = new {{clientName}}();

{{#each operations}}
		{{#equals method 'GET'}}
			export const use{{pascalCase name}} = ({{#if parameters}}{{>parameters}}{{else}}_: any{{/if}}, options?: Partial<UseQueryOptions<{{>result}}>>) => {
				return useQuery<{{>result}}>({
					queryKey: ['{{ camelCase service}}', '{{ camelCase name }}', {{#each parameters}}{{name}}, {{/each}}],
				 	queryFn: async () => {
						 return client.{{camelCase service}}.{{name}}({{#if parameters}}{
							  {{#each parameters}}
									  {{#if name}}
										   {{name}},
									  {{else}}
										_,
									  {{/if}}
							  {{/each}}
				   		 }{{/if}});
					  },
					...options
		  		});
			};

			{{#contains name 'List'}}
				 export const useInfinite{{pascalCase name}} = ({{#if parameters}}{{>parameters}}{{else}}_: any{{/if}}, options?: Partial<UseInfiniteQueryOptions<{{>result}}>>) => {
					 return useInfiniteQuery<{{>result}}>({
						 queryKey: ['{{ camelCase service}}', '{{ camelCase name }}', {{#each parameters}}{{name}}, {{/each}}],
						 queryFn: async ({ pageParam }) => {
							  return client.{{camelCase service}}.{{name}}({{#if parameters}}{
									{{#each parameters}}
										{{#if name}}
											 {{name}},
										{{else}}
											 _,
										{{/if}},
										cursor: pageParam
									{{/each}}
							   }{{/if}});
						  },
						  initialPageParam: null,
						  getNextPageParam: (lastPage, allPages) => {
							 const params = new URLSearchParams(lastPage.next_url.split('?')[1]);
							 return params.get('cursor');
						  },
						 ...options
					 });
				 };
			{{/contains}}


		{{else}}
			export const use{{pascalCase name}} = (options?: Partial<UseMutationOptions<{{>result}}>>) => {
				return useMutation<{{>result}}, any, any>({
					mutationFn: async ({{>parameters}}) => {
						 return client.{{camelCase service}}.{{name}}({{#if parameters}}{
							  {{#each parameters}}
									  {{name}},
							  {{/each}}
						 }{{/if}});
					},
					...options
				});
			};
		{{/equals}}
{{/each}}

